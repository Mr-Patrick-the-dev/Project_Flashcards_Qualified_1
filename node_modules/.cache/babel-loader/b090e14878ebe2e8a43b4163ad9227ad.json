{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\Home\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { listDecks, listCards } from \"../utils/api/index\";\nimport DeckDisplay from \"./DeckDisplay\"; //import \"./Home.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n\n  //Initial state for decks\n  const initialDecks = []; //Set state for decks\n\n  const [decks, setDecks] = useState(initialDecks); //Load history\n\n  const history = useHistory(); //Load the decks and cards to be displayed after initial render\n\n  useEffect(() => {\n    //Set decks And Cards to empty values\n    setDecks(initialDecks); //Abort controller for API fetch\n\n    const abortController = new AbortController(); //Load the cards and decks\n\n    async function getDecks() {\n      try {\n        const pulledDecks = await listDecks(abortController.signal);\n        setDecks(pulledDecks);\n      } catch (error) {\n        //Handle the error\n        if (error == \"AbortError\") {\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; //Call getDecksAndCards\n\n    getDecks(); //Abort Controller return\n\n    return () => abortController.abort();\n  }, []); //Initial cards to reset cards each re-render\n\n  const initialCards = []; //State for cards for each deck\n\n  const [cards, setCards] = useState(initialCards); //useEffect to run each time deckId changes\n  //Updates cards state for that deck\n\n  useEffect(() => {\n    //Set Cards to empty values\n    setCards(initialCards); //Abort controller for API fetch\n\n    const abortController = new AbortController(); //Load the cards\n\n    async function getCards(deckId) {\n      try {\n        const pulledCards = await listCards(deckId, abortController.signal);\n        setCards(pulledCards);\n      } catch (error) {\n        //Handle the error\n        if (error == \"AbortError\") {\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; //Call getCards\n\n    getCards(deckId); //Abort Controller return\n\n    return () => abortController.abort();\n  }, []); //Check to see if decks is empty\n\n  if (decks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => history.push(\"/decks/new\"),\n        children: \"Create Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeckDisplay, {\n        decks: decks,\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  } else {\n    //No decks\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"...Loading Decks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }, this);\n  }\n\n  ;\n}\n\n_s(HomePage, \"8+mVjUVyYTWHKo2GZdl3Knnvoeg=\", false, function () {\n  return [useHistory];\n});\n\n_c = HomePage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/Home/Home.js"],"names":["React","useEffect","useState","useHistory","listDecks","listCards","DeckDisplay","HomePage","initialDecks","decks","setDecks","history","abortController","AbortController","getDecks","pulledDecks","signal","error","console","log","abort","initialCards","cards","setCards","getCards","deckId","pulledCards","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { listDecks, listCards } from \"../utils/api/index\";\r\nimport DeckDisplay from \"./DeckDisplay\";\r\n//import \"./Home.css\";\r\n\r\nexport default function HomePage() {\r\n    //Initial state for decks\r\n    const initialDecks = [];\r\n\r\n    //Set state for decks\r\n    const [decks, setDecks] = useState(initialDecks);\r\n\r\n    //Load history\r\n    const history = useHistory();\r\n\r\n    //Load the decks and cards to be displayed after initial render\r\n    useEffect(() => {\r\n        //Set decks And Cards to empty values\r\n        setDecks(initialDecks);\r\n\r\n        //Abort controller for API fetch\r\n        const abortController = new AbortController();\r\n\r\n        //Load the cards and decks\r\n        async function getDecks() {\r\n            try {\r\n                const pulledDecks = await listDecks(abortController.signal)\r\n                setDecks(pulledDecks);\r\n            } catch (error) {\r\n                //Handle the error\r\n                if (error==\"AbortError\") {\r\n                    console.log(\"Aborted\");\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        //Call getDecksAndCards\r\n        getDecks()\r\n\r\n        //Abort Controller return\r\n        return () => abortController.abort();\r\n    },[]);\r\n\r\n    //Initial cards to reset cards each re-render\r\n    const initialCards = [];\r\n\r\n    //State for cards for each deck\r\n    const [cards, setCards] = useState(initialCards);\r\n    \r\n    //useEffect to run each time deckId changes\r\n        //Updates cards state for that deck\r\n    useEffect(() => {\r\n\r\n         //Set Cards to empty values\r\n         setCards(initialCards);\r\n\r\n         //Abort controller for API fetch\r\n         const abortController = new AbortController();\r\n \r\n         //Load the cards\r\n         async function getCards(deckId) {\r\n             try {\r\n                 const pulledCards = await listCards(deckId, abortController.signal);\r\n                 setCards(pulledCards);\r\n             } catch (error) {\r\n                 //Handle the error\r\n                 if (error==\"AbortError\") {\r\n                     console.log(\"Aborted\");\r\n                 } else {\r\n                     throw error;\r\n                 };\r\n             };\r\n         };\r\n \r\n         //Call getCards\r\n         getCards(deckId)\r\n \r\n         //Abort Controller return\r\n         return () => abortController.abort();\r\n    }, []);\r\n\r\n    //Check to see if decks is empty\r\n    if (decks) {\r\n        return (\r\n            <div>\r\n            <button\r\n            type=\"button\"\r\n            onClick={() => history.push(\"/decks/new\")}>Create Deck</button>\r\n            <hr />\r\n            <DeckDisplay decks={decks} cards={cards} />\r\n            </div>\r\n        )\r\n    } else {\r\n        //No decks\r\n        return <h3>...Loading Decks</h3>\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}