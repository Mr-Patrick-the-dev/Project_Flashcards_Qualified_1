{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\Deck\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Link, useParams, useRouteMatch } from \"react-router-dom\";\nimport ShowDeck from \"./ShowDeck\";\nimport DeckCards from \"./DeckCards\";\nimport EditDeck from \"../EditDeck/EditDeck\";\nimport EditCard from \"../EditCard/EditCard\";\nimport AddCard from \"../AddCard/AddCard\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { readDeck, listCards } from \"../utils/api\"; //This function will host:\n//A component rendering the deck and cards (2 separate components)\n//A component rendering the Study Page\n//A componenent rendering the EditDeck Page\n//A component rendering the EditCard Page\n//A component rendering the AddCard Page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function HostDeck() {\n  _s();\n\n  //Gather the deckId param. used for initailDeck\n  const {\n    deckId\n  } = useParams(); //Gather Route match for URL\n\n  const {\n    url\n  } = useRouteMatch(); //Create initial deck and cards array\n\n  async function deckInfo(deckId) {\n    readDeck(deckId).then(result);\n    return result;\n  }\n\n  const initialCards = []; //Deck state will be passed to ShowDeck\n\n  const [deck, setDeck] = useState(deckInfo(deckId)); //Cards will be passed to DeckCards\n\n  const [cards, setCards] = useState(initialCards);\n  console.log(deck); //useEffect for after initial render to read the deck\n\n  /*\r\n  useEffect(() => {\r\n        //Reset the deck\r\n      setDeck(initialDeck);\r\n      \r\n      //Abort Controller\r\n      const abortController = new AbortController();\r\n        //Read the deck\r\n      async function readTheDeck() {\r\n          try{\r\n              const pulledDeck = readDeck(deckId, abortController.signal());\r\n              console.log(pulledDeck)\r\n              setDeck(pulledDeck);\r\n          } catch (error) {\r\n              if (error==\"AbortError\") {\r\n                  console.log(error);\r\n              } else {\r\n                  throw error;\r\n              };\r\n          };\r\n      };\r\n        readTheDeck();\r\n        return () => abortController.abort();\r\n  }, []);\r\n  */\n  //useEffect for cards that will run after deck has been changed\n\n  useEffect(() => {\n    //Reset the cards\n    setCards(initialCards); //Abort Controller\n\n    const abortController = new AbortController(); //Gather cards for deck\n\n    async function getTheCards() {\n      try {\n        const deckCards = listCards(deckId, abortController.signal());\n        setCards(deckCards);\n      } catch (error) {\n        if (error == \"AbortError\") {\n          console.log(error);\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    getTheCards();\n    return () => abortController.abort();\n  }, [deck]); //Check that deck is not an empty value\n\n  if (deck) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: url,\n          children: [/*#__PURE__*/_jsxDEV(ShowDeck, {\n            deck: deck,\n            url: url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DeckCards, {\n            cards: cards,\n            url: url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \".....Loading deck and cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }, this);\n  }\n}\n\n_s(HostDeck, \"m7sQbkVTn1Vhhx/fmE9WqX3PBS0=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = HostDeck;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"HostDeck\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/Deck/Deck.js"],"names":["React","useEffect","useState","Route","Switch","Link","useParams","useRouteMatch","ShowDeck","DeckCards","EditDeck","EditCard","AddCard","NavBar","readDeck","listCards","HostDeck","deckId","url","deckInfo","then","result","initialCards","deck","setDeck","cards","setCards","console","log","abortController","AbortController","getTheCards","deckCards","signal","error","abort"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, Link, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport ShowDeck from \"./ShowDeck\";\r\nimport DeckCards from \"./DeckCards\";\r\nimport EditDeck from \"../EditDeck/EditDeck\";\r\nimport EditCard from \"../EditCard/EditCard\";\r\nimport AddCard from \"../AddCard/AddCard\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport { readDeck, listCards } from \"../utils/api\";\r\n\r\n\r\n//This function will host:\r\n    //A component rendering the deck and cards (2 separate components)\r\n    //A component rendering the Study Page\r\n    //A componenent rendering the EditDeck Page\r\n    //A component rendering the EditCard Page\r\n    //A component rendering the AddCard Page\r\n\r\nexport default function HostDeck() {\r\n\r\n    //Gather the deckId param. used for initailDeck\r\n    const { deckId } = useParams()\r\n\r\n    //Gather Route match for URL\r\n    const { url } = useRouteMatch();\r\n\r\n    //Create initial deck and cards array\r\n    async function deckInfo(deckId) {\r\n        readDeck(deckId).then(result);\r\n\r\n        return result\r\n    }\r\n    \r\n    const initialCards = [];\r\n\r\n    //Deck state will be passed to ShowDeck\r\n    const [deck, setDeck] = useState(deckInfo(deckId));\r\n        //Cards will be passed to DeckCards\r\n    const [cards, setCards] = useState(initialCards);\r\n\r\n    console.log(deck)\r\n    //useEffect for after initial render to read the deck\r\n    /*\r\n    useEffect(() => {\r\n\r\n        //Reset the deck\r\n        setDeck(initialDeck);\r\n        \r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Read the deck\r\n        async function readTheDeck() {\r\n            try{\r\n                const pulledDeck = readDeck(deckId, abortController.signal());\r\n                console.log(pulledDeck)\r\n                setDeck(pulledDeck);\r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        readTheDeck();\r\n\r\n        return () => abortController.abort();\r\n    }, []);\r\n    */\r\n\r\n    //useEffect for cards that will run after deck has been changed\r\n    useEffect(() => {\r\n\r\n        //Reset the cards\r\n        setCards(initialCards);\r\n        \r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Gather cards for deck\r\n        async function getTheCards() {\r\n            try{\r\n                const deckCards = listCards(deckId, abortController.signal());\r\n                \r\n                setCards(deckCards);\r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        getTheCards();\r\n\r\n        return () => abortController.abort();\r\n    }, [deck]);\r\n\r\n\r\n    //Check that deck is not an empty value\r\n    if(deck) {\r\n        return (\r\n            <>\r\n            <Switch>\r\n                <Route  path={url}>\r\n                    <ShowDeck deck={deck} url={url} />\r\n                    <DeckCards cards={cards} url={url} />\r\n                </Route>\r\n            </Switch>\r\n            </>\r\n        );\r\n    } else {\r\n       return <h3>.....Loading deck and cards</h3>\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}