{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\Deck\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Link, useParams, useHistory } from \"react-router-dom\";\nimport EditDeck from \"../EditDeck/EditDeck\";\nimport EditCard from \"../EditCard/EditCard\";\nimport AddCard from \"../AddCard/AddCard\";\nimport NavBar from \"../NavBar/NavBar\";\nimport { readDeck, listCards } from \"../utils/api\"; //This function will host:\n//A component rendering the deck and cards (2 separate components)\n//A component rendering the Study Page\n//A componenent rendering the EditDeck Page\n//A component rendering the EditCard Page\n//A component rendering the AddCard Page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function HostDeck() {\n  _s();\n\n  //Gather the deckId param\n  const {\n    deckId\n  } = useParams(); //Create initial empty deck and cards states for easier resets later\n  //May need id added later\n\n  const initialDeck = {\n    name: \"\",\n    description: \"\"\n  };\n  const initialCards = []; //Create states\n\n  const [deck, setDeck] = useState(initialDeck);\n  const [cards, setCards] = useState(initialCards); //useEffect for after initial render to read the deck\n\n  useEffect(() => {\n    setDeck(initialDeck);\n    setCards(initialCards); //Abort Controller\n\n    const abortController = new AbortController(); //Read the deck\n\n    async function readTheDeck() {\n      try {\n        const pulledDeck = readDeck(deckId, abortController.signal());\n        setDeck(pulledDeck);\n      } catch (error) {\n        if (error == \"AbortError\") {\n          console.log(error);\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    readTheDeck();\n    return () => abortController.abort();\n  }, []); //useEffect for cards that will run after deck has been changed\n\n  useEffect(() => {\n    //Abort Controller\n    const abortController = new AbortController(); //Gather cards for deck\n\n    async function getTheCards() {\n      try {\n        const pulledDeck = listCards(deckId, abortController.signal());\n        setDeck(pulledDeck);\n      } catch (error) {\n        if (error == \"AbortError\") {\n          console.log(error);\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    getTheCards();\n    return () => abortController.abort();\n  }, [deck]);\n\n  if (deck) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ShowDeck, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeckCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else {\n    /*#__PURE__*/\n    _jsxDEV(\"h3\", {\n      children: \".....Loading deck and cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(HostDeck, \"KFPNhXfetqp3IzB5JHqQ9z1vXSc=\", false, function () {\n  return [useParams];\n});\n\n_c = HostDeck;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"HostDeck\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/Deck/Deck.js"],"names":["React","useEffect","useState","Route","Switch","Link","useParams","useHistory","EditDeck","EditCard","AddCard","NavBar","readDeck","listCards","HostDeck","deckId","initialDeck","name","description","initialCards","deck","setDeck","cards","setCards","abortController","AbortController","readTheDeck","pulledDeck","signal","error","console","log","abort","getTheCards"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyCC,UAAzC,QAA2D,kBAA3D;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,cAApC,C,CAGA;AACI;AACA;AACA;AACA;AACA;;;;AAEJ,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAE/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaT,SAAS,EAA5B,CAH+B,CAK/B;AACI;;AACJ,QAAMU,WAAW,GAAG;AAACC,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,WAAW,EAAE;AAAxB,GAApB;AACA,QAAMC,YAAY,GAAG,EAArB,CAR+B,CAU/B;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACc,WAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAACiB,YAAD,CAAlC,CAZ+B,CAc/B;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AAEZoB,IAAAA,OAAO,CAACL,WAAD,CAAP;AACAO,IAAAA,QAAQ,CAACJ,YAAD,CAAR,CAHY,CAKZ;;AACA,UAAMK,eAAe,GAAG,IAAIC,eAAJ,EAAxB,CANY,CAQZ;;AACA,mBAAeC,WAAf,GAA6B;AACzB,UAAG;AACC,cAAMC,UAAU,GAAGf,QAAQ,CAACG,MAAD,EAASS,eAAe,CAACI,MAAhB,EAAT,CAA3B;AAEAP,QAAAA,OAAO,CAACM,UAAD,CAAP;AACH,OAJD,CAIE,OAAOE,KAAP,EAAc;AACZ,YAAIA,KAAK,IAAE,YAAX,EAAyB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,SAFD,MAEO;AACH,gBAAMA,KAAN;AACH;;AAAA;AACJ;;AAAA;AACJ;;AAAA;AAEDH,IAAAA,WAAW;AAEX,WAAO,MAAMF,eAAe,CAACQ,KAAhB,EAAb;AACH,GA1BQ,EA0BN,EA1BM,CAAT,CAf+B,CA2C/B;;AACA/B,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,UAAMuB,eAAe,GAAG,IAAIC,eAAJ,EAAxB,CAHY,CAKZ;;AACA,mBAAeQ,WAAf,GAA6B;AACzB,UAAG;AACC,cAAMN,UAAU,GAAGd,SAAS,CAACE,MAAD,EAASS,eAAe,CAACI,MAAhB,EAAT,CAA5B;AAEAP,QAAAA,OAAO,CAACM,UAAD,CAAP;AACH,OAJD,CAIE,OAAOE,KAAP,EAAc;AACZ,YAAIA,KAAK,IAAE,YAAX,EAAyB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,SAFD,MAEO;AACH,gBAAMA,KAAN;AACH;;AAAA;AACJ;;AAAA;AACJ;;AAAA;AAEDI,IAAAA,WAAW;AAEX,WAAO,MAAMT,eAAe,CAACQ,KAAhB,EAAb;AACH,GAvBQ,EAuBN,CAACZ,IAAD,CAvBM,CAAT;;AAyBA,MAAGA,IAAH,EAAS;AACL,wBACI;AAAA,8BACA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADJ;AAMH,GAPD,MAOO;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACJ;;GA/EuBN,Q;UAGDR,S;;;KAHCQ,Q;AA+EvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, Link, useParams, useHistory } from \"react-router-dom\";\r\nimport EditDeck from \"../EditDeck/EditDeck\";\r\nimport EditCard from \"../EditCard/EditCard\";\r\nimport AddCard from \"../AddCard/AddCard\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport { readDeck, listCards } from \"../utils/api\";\r\n\r\n\r\n//This function will host:\r\n    //A component rendering the deck and cards (2 separate components)\r\n    //A component rendering the Study Page\r\n    //A componenent rendering the EditDeck Page\r\n    //A component rendering the EditCard Page\r\n    //A component rendering the AddCard Page\r\n\r\nexport default function HostDeck() {\r\n\r\n    //Gather the deckId param\r\n    const { deckId } = useParams()\r\n\r\n    //Create initial empty deck and cards states for easier resets later\r\n        //May need id added later\r\n    const initialDeck = {name: \"\", description: \"\"};\r\n    const initialCards = [];\r\n\r\n    //Create states\r\n    const [deck, setDeck] = useState(initialDeck);\r\n    const [cards, setCards] = useState(initialCards);\r\n\r\n    //useEffect for after initial render to read the deck\r\n    useEffect(() => {\r\n\r\n        setDeck(initialDeck);\r\n        setCards(initialCards);\r\n\r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Read the deck\r\n        async function readTheDeck() {\r\n            try{\r\n                const pulledDeck = readDeck(deckId, abortController.signal());\r\n                \r\n                setDeck(pulledDeck);\r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        readTheDeck();\r\n\r\n        return () => abortController.abort();\r\n    }, []);\r\n\r\n    //useEffect for cards that will run after deck has been changed\r\n    useEffect(() => {\r\n        \r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Gather cards for deck\r\n        async function getTheCards() {\r\n            try{\r\n                const pulledDeck = listCards(deckId, abortController.signal());\r\n                \r\n                setDeck(pulledDeck);\r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        getTheCards();\r\n\r\n        return () => abortController.abort();\r\n    }, [deck]);\r\n\r\n    if(deck) {\r\n        return (\r\n            <>\r\n            <ShowDeck />\r\n            <DeckCards />\r\n            </>\r\n        );\r\n    } else {\r\n        <h3>.....Loading deck and cards</h3>\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}