{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\Home\\\\CardCount.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { listCards } from \"../utils/api/index\"; // Component to return number of cards in deck\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CardCount({\n  deckId,\n  deckCards\n}) {\n  _s();\n\n  //Initial cards to reset cards each re-render\n  const initialCards = []; //State for cards for each deck\n\n  const [cards, setCards] = useState(initialCards); //useEffect to run each time deckId changes\n  //Updates cards state for that deck\n\n  useEffect(() => {\n    //Set Cards to empty values\n    setCards(initialCards); //Abort controller for API fetch\n\n    const abortController = new AbortController(); //Load the cards\n\n    async function getCards(deckId) {\n      try {\n        const pulledCards = await listCards(deckId, abortController.signal);\n        setCards(pulledCards);\n      } catch (error) {\n        //Handle the error\n        if (error == \"AbortError\") {\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; //Call getCards\n\n    getCards(deckId); //Abort Controller return\n\n    return () => abortController.abort();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h5\", {\n    children: [deckCards.length, \" cards\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}\n\n_s(CardCount, \"RFZNOatQGYMqzj4Spzmkw3EOGUY=\");\n\n_c = CardCount;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardCount\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/Home/CardCount.js"],"names":["React","useEffect","useState","listCards","CardCount","deckId","deckCards","initialCards","cards","setCards","abortController","AbortController","getCards","pulledCards","signal","error","console","log","abort","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CAEA;;;AACA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAnB,EAA0C;AAAA;;AAGrD;AACA,QAAMC,YAAY,GAAG,EAArB,CAJqD,CAMrD;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,YAAD,CAAlC,CAPqD,CASrD;AACI;;AACJN,EAAAA,SAAS,CAAC,MAAM;AAEX;AACAQ,IAAAA,QAAQ,CAACF,YAAD,CAAR,CAHW,CAKX;;AACA,UAAMG,eAAe,GAAG,IAAIC,eAAJ,EAAxB,CANW,CAQX;;AACA,mBAAeC,QAAf,CAAwBP,MAAxB,EAAgC;AAC5B,UAAI;AACA,cAAMQ,WAAW,GAAG,MAAMV,SAAS,CAACE,MAAD,EAASK,eAAe,CAACI,MAAzB,CAAnC;AACAL,QAAAA,QAAQ,CAACI,WAAD,CAAR;AACH,OAHD,CAGE,OAAOE,KAAP,EAAc;AACZ;AACA,YAAIA,KAAK,IAAE,YAAX,EAAyB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,SAFD,MAEO;AACH,gBAAMF,KAAN;AACH;;AAAA;AACJ;;AAAA;AACJ;;AAAA,KArBU,CAuBX;;AACAH,IAAAA,QAAQ,CAACP,MAAD,CAAR,CAxBW,CA0BX;;AACA,WAAO,MAAMK,eAAe,CAACQ,KAAhB,EAAb;AACJ,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,sBAAO;AAAA,eAAKZ,SAAS,CAACa,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GA1CuBf,S;;KAAAA,S;AA0CvB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { listCards } from \"../utils/api/index\";\r\n\r\n// Component to return number of cards in deck\r\nexport default function CardCount({ deckId, deckCards }) {\r\n\r\n    \r\n    //Initial cards to reset cards each re-render\r\n    const initialCards = [];\r\n\r\n    //State for cards for each deck\r\n    const [cards, setCards] = useState(initialCards);\r\n    \r\n    //useEffect to run each time deckId changes\r\n        //Updates cards state for that deck\r\n    useEffect(() => {\r\n\r\n         //Set Cards to empty values\r\n         setCards(initialCards);\r\n\r\n         //Abort controller for API fetch\r\n         const abortController = new AbortController();\r\n \r\n         //Load the cards\r\n         async function getCards(deckId) {\r\n             try {\r\n                 const pulledCards = await listCards(deckId, abortController.signal);\r\n                 setCards(pulledCards);\r\n             } catch (error) {\r\n                 //Handle the error\r\n                 if (error==\"AbortError\") {\r\n                     console.log(\"Aborted\");\r\n                 } else {\r\n                     throw error;\r\n                 };\r\n             };\r\n         };\r\n \r\n         //Call getCards\r\n         getCards(deckId)\r\n \r\n         //Abort Controller return\r\n         return () => abortController.abort();\r\n    }, []);\r\n\r\n    return <h5>{deckCards.length} cards</h5>\r\n};"]},"metadata":{},"sourceType":"module"}