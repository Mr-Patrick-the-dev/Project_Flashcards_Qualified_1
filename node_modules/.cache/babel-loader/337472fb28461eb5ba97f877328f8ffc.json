{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\Deck\\\\Deck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, useParams, useRouteMatch, useHistory } from \"react-router-dom\";\nimport ShowDeck from \"./ShowDeck\";\nimport DeckCards from \"./DeckCards\";\nimport EditDeck from \"../EditDeck/EditDeck\";\nimport EditCard from \"../EditCard/EditCard\";\nimport StudyDeck from \"../Study/StudyDeck\";\nimport AddCards from \"../AddCard/AddCard\";\nimport { readDeck, listCards } from \"../utils/api\"; //import \"./Deck.css\";\n//This function will host:\n//A component rendering the deck and cards (2 separate components)\n//A component rendering the Study Page\n//A componenent rendering the EditDeck Page\n//A component rendering the EditCard Page\n//A component rendering the AddCard Page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HostDeck() {\n  _s();\n\n  const history = useHistory(); //Gather the deckId param. used for initailDeck\n\n  const {\n    deckId\n  } = useParams(); //Gather Route match for URL\n\n  const {\n    url,\n    path\n  } = useRouteMatch(); //Create initial deck and cards array\n\n  const initialDeck = {\n    name: \"\",\n    description: \"\",\n    id: {\n      deckId\n    }\n  };\n  const initialCards = []; //Deck state will be passed to ShowDeck\n\n  const [deck, setDeck] = useState(initialDeck); //Cards will be passed to DeckCards\n\n  const [cards, setCards] = useState(initialCards); //useEffect for after initial render to read the deck\n\n  useEffect(() => {\n    //Reset the deck\n    setDeck(initialDeck); //Abort Controller\n\n    const abortController = new AbortController(); //Read the deck\n\n    async function readTheDeck() {\n      try {\n        const pulledDeck = await readDeck(deckId, abortController.signal);\n        setDeck(pulledDeck);\n      } catch (error) {\n        if (error == \"AbortError\") {\n          console.log(error);\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    readTheDeck();\n    return () => abortController.abort();\n  }, []); //useEffect for cards that will run after deck has been changed\n\n  useEffect(() => {\n    //Reset the cards\n    setCards(initialCards); //Abort Controller\n\n    const abortController = new AbortController(); //Gather cards for deck\n\n    async function getTheCards(deckId) {\n      try {\n        const deckCards = await listCards(deckId, abortController.signal);\n        setCards(deckCards);\n      } catch (error) {\n        if (error == \"AbortError\") {\n          console.log(error);\n        } else {\n          throw error;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    getTheCards(deckId);\n    return () => abortController.abort();\n  }, [deckId]); //Check that deck is not an empty value\n\n  if (deck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: url,\n          children: [/*#__PURE__*/_jsxDEV(ShowDeck, {\n            deck: deck,\n            url: url,\n            history: history\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DeckCards, {\n            cards: cards,\n            url: url,\n            history: history\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${path}/study`,\n          children: /*#__PURE__*/_jsxDEV(StudyDeck, {\n            deck: deck,\n            cards: cards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${path}/edit`,\n          children: /*#__PURE__*/_jsxDEV(EditDeck, {\n            deck: deck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${path}/cards/new`,\n          children: /*#__PURE__*/_jsxDEV(AddCards, {\n            deckName: deck.name,\n            deckId: deckId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${path}/cards/:cardId/edit`,\n          children: /*#__PURE__*/_jsxDEV(EditCard, {\n            deckName: deck.name,\n            deckUrl: url,\n            cards: cards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \".....Loading deck and cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }, this);\n  }\n}\n\n_s(HostDeck, \"auKPg5xMrWq/Czayf8yIbCa4Vns=\", false, function () {\n  return [useHistory, useParams, useRouteMatch];\n});\n\n_c = HostDeck;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"HostDeck\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/Deck/Deck.js"],"names":["React","useEffect","useState","Route","Switch","useParams","useRouteMatch","useHistory","ShowDeck","DeckCards","EditDeck","EditCard","StudyDeck","AddCards","readDeck","listCards","HostDeck","history","deckId","url","path","initialDeck","name","description","id","initialCards","deck","setDeck","cards","setCards","abortController","AbortController","readTheDeck","pulledDeck","signal","error","console","log","abort","getTheCards","deckCards"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, useParams, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport ShowDeck from \"./ShowDeck\";\r\nimport DeckCards from \"./DeckCards\";\r\nimport EditDeck from \"../EditDeck/EditDeck\";\r\nimport EditCard from \"../EditCard/EditCard\";\r\nimport StudyDeck from \"../Study/StudyDeck\";\r\nimport AddCards from \"../AddCard/AddCard\";\r\nimport { readDeck, listCards } from \"../utils/api\";\r\n//import \"./Deck.css\";\r\n\r\n\r\n//This function will host:\r\n    //A component rendering the deck and cards (2 separate components)\r\n    //A component rendering the Study Page\r\n    //A componenent rendering the EditDeck Page\r\n    //A component rendering the EditCard Page\r\n    //A component rendering the AddCard Page\r\n\r\nexport default function HostDeck() {\r\n\r\n    const history = useHistory();\r\n\r\n    //Gather the deckId param. used for initailDeck\r\n    const { deckId } = useParams()\r\n\r\n    //Gather Route match for URL\r\n    const { url, path } = useRouteMatch();\r\n\r\n    //Create initial deck and cards array\r\n    const initialDeck = {name: \"\", description: \"\", id:{deckId}}\r\n    const initialCards = [];\r\n\r\n    //Deck state will be passed to ShowDeck\r\n    const [deck, setDeck] = useState(initialDeck);\r\n        //Cards will be passed to DeckCards\r\n    const [cards, setCards] = useState(initialCards);\r\n\r\n    //useEffect for after initial render to read the deck\r\n    \r\n    useEffect(() => {\r\n\r\n        //Reset the deck\r\n        setDeck(initialDeck);\r\n        \r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Read the deck\r\n        async function readTheDeck() {\r\n            try{\r\n                const pulledDeck = await readDeck(deckId, abortController.signal);\r\n                setDeck(pulledDeck);\r\n                \r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        readTheDeck();\r\n\r\n        return () => abortController.abort();\r\n    },[]);\r\n    \r\n\r\n    //useEffect for cards that will run after deck has been changed\r\n    useEffect(() => {\r\n\r\n        //Reset the cards\r\n        setCards(initialCards);\r\n        \r\n        //Abort Controller\r\n        const abortController = new AbortController();\r\n\r\n        //Gather cards for deck\r\n        async function getTheCards(deckId) {\r\n            try{\r\n                const deckCards = await listCards(deckId, abortController.signal);\r\n                setCards(deckCards);\r\n            } catch (error) {\r\n                if (error==\"AbortError\") {\r\n                    console.log(error);\r\n                } else {\r\n                    throw error;\r\n                };\r\n            };\r\n        };\r\n\r\n        getTheCards(deckId);\r\n\r\n        return () => abortController.abort();\r\n    }, [deckId]);\r\n\r\n    //Check that deck is not an empty value\r\n    if(deck) {\r\n        return (\r\n            <div>\r\n            <Switch>\r\n                <Route exact={true} path={url}>\r\n                    <ShowDeck \r\n                    deck={deck}\r\n                    url={url} \r\n                    history={history} />\r\n\r\n                    <DeckCards \r\n                    cards={cards} \r\n                    url={url} \r\n                    history={history}/>\r\n                </Route>\r\n                <Route path={`${path}/study`}>\r\n                    <StudyDeck \r\n                    deck={deck} \r\n                    cards={cards}/>\r\n                </Route>\r\n                <Route path={`${path}/edit`}>\r\n                    <EditDeck \r\n                    deck={deck}/>\r\n                </Route>\r\n                <Route path={`${path}/cards/new`}>\r\n                    <AddCards \r\n                    deckName={deck.name} \r\n                    deckId={deckId} />\r\n                </Route>\r\n                <Route path={`${path}/cards/:cardId/edit`}>\r\n                    <EditCard \r\n                    deckName={deck.name}\r\n                    deckUrl={url}\r\n                    cards={cards} />\r\n                </Route>\r\n            </Switch>\r\n            </div>\r\n        );\r\n    } else {\r\n       return <h3>.....Loading deck and cards</h3>\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}