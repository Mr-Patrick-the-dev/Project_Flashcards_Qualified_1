{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\Thinkful\\\\Project_Flashcards_Qualified_1\\\\src\\\\AddCard\\\\CardForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createCard, updateCard } from \"../utils/api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewCardForm({\n  deckId,\n  card,\n  cardFunction\n}) {\n  _s();\n\n  //deck will have either the pre-filled default deck (new) or the current deck info (edit)\n  //Grab history for later use\n  const history = useHistory(); //Set new blank deck state\n\n  const [newCard, setNewCard] = useState(card); //changeHandler\n\n  const changeHandler = ({\n    target\n  }) => {\n    setNewCard({ ...newCard,\n      [target.name]: target.value\n    });\n  };\n\n  console.log(newCard); //submitHandler\n\n  const submitHandler = (newCard, deckId) => {\n    //Abort controller for deckFunction API call\n    const abortController = new AbortController(); //use function passed from page\n\n    const submittedCard = createCard(deckId, newCard, abortController.signal);\n    setNewCard(card);\n    history.push(`/decks/${deckId}/cards/new`); //Abort controller\n\n    return () => abortController.abort();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: () => submitHandler(newCard, deckId),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"front\",\n        children: \"Front:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"front\",\n        name: \"front\",\n        onChange: changeHandler,\n        placeholder: card.front,\n        required: true,\n        cols: 40,\n        rows: 7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"back\",\n        children: \"Back:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"back\",\n        name: \"back\",\n        onChange: changeHandler,\n        placeholder: card.back,\n        required: true,\n        cols: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => history.push(\"/\"),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(NewCardForm, \"UqybQi8Nx58lHvBp+OBcCJoEjgA=\", false, function () {\n  return [useHistory];\n});\n\n_c = NewCardForm;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewCardForm\");","map":{"version":3,"sources":["C:/Users/patri/Desktop/Thinkful/Project_Flashcards_Qualified_1/src/AddCard/CardForm.js"],"names":["React","useState","useHistory","createCard","updateCard","NewCardForm","deckId","card","cardFunction","history","newCard","setNewCard","changeHandler","target","name","value","console","log","submitHandler","abortController","AbortController","submittedCard","signal","push","abort","front","back"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;;;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAArB,EAAqD;AAAA;;AAChE;AAEA;AACA,QAAMC,OAAO,GAAGP,UAAU,EAA1B,CAJgE,CAMhE;;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAACM,IAAD,CAAtC,CAPgE,CAShE;;AACA,QAAMK,aAAa,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AAClCF,IAAAA,UAAU,CAAC,EACP,GAAGD,OADI;AAEP,OAACG,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFf,KAAD,CAAV;AAIH,GALD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ,EAhBgE,CAiBhE;;AACA,QAAMQ,aAAa,GAAG,CAACR,OAAD,EAAUJ,MAAV,KAAqB;AACvC;AACA,UAAMa,eAAe,GAAG,IAAIC,eAAJ,EAAxB,CAFuC,CAIvC;;AACA,UAAMC,aAAa,GAAGlB,UAAU,CAACG,MAAD,EAASI,OAAT,EAAkBS,eAAe,CAACG,MAAlC,CAAhC;AACAX,IAAAA,UAAU,CAACJ,IAAD,CAAV;AACAE,IAAAA,OAAO,CAACc,IAAR,CAAc,UAASjB,MAAO,YAA9B,EAPuC,CASvC;;AACA,WAAO,MAAMa,eAAe,CAACK,KAAhB,EAAb;AACH,GAXD;;AAaA,sBACI;AAAA,2BACA;AAAM,MAAA,QAAQ,EAAE,MAAIN,aAAa,CAACR,OAAD,EAAUJ,MAAV,CAAjC;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAIQ;AACA,QAAA,EAAE,EAAC,OADH;AAEA,QAAA,IAAI,EAAC,OAFL;AAGA,QAAA,QAAQ,EAAEM,aAHV;AAIA,QAAA,WAAW,EAAEL,IAAI,CAACkB,KAJlB;AAKA,QAAA,QAAQ,MALR;AAMA,QAAA,IAAI,EAAE,EANN;AAOA,QAAA,IAAI,EAAE;AAPN;AAAA;AAAA;AAAA;AAAA,cAJR,eAaQ;AAAA;AAAA;AAAA;AAAA,cAbR,eAcI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eAiBQ;AACA,QAAA,EAAE,EAAC,MADH;AAEA,QAAA,IAAI,EAAC,MAFL;AAGA,QAAA,QAAQ,EAAEb,aAHV;AAIA,QAAA,WAAW,EAAEL,IAAI,CAACmB,IAJlB;AAKA,QAAA,QAAQ,MALR;AAMA,QAAA,IAAI,EAAE;AANN;AAAA;AAAA;AAAA;AAAA,cAjBR,eAwBQ;AAAA;AAAA;AAAA;AAAA,cAxBR,eAyBI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBJ,eA0BI;AAAQ,QAAA,OAAO,EAAE,MAAMjB,OAAO,CAACc,IAAR,CAAa,GAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAgCH;;GA/DuBlB,W;UAIJH,U;;;KAJIG,W;AA+DvB","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createCard, updateCard } from \"../utils/api/index\";\r\n\r\nexport default function NewCardForm({ deckId, card, cardFunction }) {\r\n    //deck will have either the pre-filled default deck (new) or the current deck info (edit)\r\n\r\n    //Grab history for later use\r\n    const history = useHistory();\r\n\r\n    //Set new blank deck state\r\n    const [newCard, setNewCard] = useState(card);\r\n\r\n    //changeHandler\r\n    const changeHandler = ({ target }) => {\r\n        setNewCard({\r\n            ...newCard,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n    console.log(newCard)\r\n    //submitHandler\r\n    const submitHandler = (newCard, deckId) => {\r\n        //Abort controller for deckFunction API call\r\n        const abortController = new AbortController()\r\n\r\n        //use function passed from page\r\n        const submittedCard = createCard(deckId, newCard, abortController.signal);\r\n        setNewCard(card);\r\n        history.push(`/decks/${deckId}/cards/new`);\r\n\r\n        //Abort controller\r\n        return () => abortController.abort();\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={()=>submitHandler(newCard, deckId)}>\r\n            <label htmlFor=\"front\">\r\n            Front:\r\n            </label>\r\n                <textarea\r\n                id=\"front\"\r\n                name=\"front\"\r\n                onChange={changeHandler}\r\n                placeholder={card.front}\r\n                required\r\n                cols={40}\r\n                rows={7} />\r\n\r\n                <hr />\r\n            <label htmlFor=\"back\">\r\n            Back:\r\n            </label>\r\n                <textarea\r\n                id=\"back\"\r\n                name=\"back\"\r\n                onChange={changeHandler}\r\n                placeholder={card.back}\r\n                required \r\n                cols={40}/>\r\n                <hr />\r\n            <button type=\"submit\">Submit</button>\r\n            <button onClick={() => history.push(\"/\")}>Cancel</button>\r\n        </form>\r\n        </>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}